#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 15:42:19 2022

@author: teohz
"""
from i24_database_api.db_reader import DBReader
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.animation as animation
import numpy as np
import cmd
import json
import os
import pymongo

class OverheadVisualizer():
    """
    Overhead Visualizer utilizes i24_database_api to query trajectories
    information and plot a visualization of the vehicles.
    """
    
    def __init__(self, config):
        """
        Initializes an Overhead Traffic VIsualizer object
        
        Parameters
        ----------
        config : object
        """
        self.timestamp_dbr = DBReader(host=config["host"], 
                                      port=config["port"], 
                                      username=config["username"], 
                                      password=config["password"], 
                                      database_name="lisatest", 
                                      collection_name="transformed_trajectories")
        self.traj_dbr = DBReader(host=config["host"],
                                 port=config["port"],
                                 username=config["username"], 
                                 password=config["password"], 
                                 database_name="lisatest", 
                                 collection_name="read_v1")
        self.anim = None
        
    def visualize(self, frames=500, save=False):
        x_start = 20000
        x_end = 18000
        
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.set_aspect('equal', 'box')
        ax1.set(ylim=[0, 50])
        ax1.set_title("Bird-eye view")
        ax1.set(xlim=[x_start, x_end])
        frame_text = ax1.text(max(ax1.get_xlim()), max(ax1.get_ylim()), 'Frame 0', fontsize=12)

        # maintains a cache of vehicle information (width, height, class)        
        # cache_vehicle[car_id] = [width, height, coarse_vehicle_class]
        cache_vehicle = {}
        
        cursor = self.timestamp_dbr.collection.find().sort([("timestamp", pymongo.ASCENDING)]).limit(frames)
        
        def init():
            return ax1,
        
        def animate(i, frame_text, cursor, cache_vehicle):
            colors = ['r', 'b', 'g', 'm', 'y', 'k']
            
            #print("frame: {}".format(i))
            frame_text.set_text("Frame {}".format(i))
            
            doc = cursor.next()
            #print(doc["timestamp"])
            #print(len(doc["x_position"]))
            
            # traj_cursor = self.traj_dbr.collection.find({"_id": {"$in": doc["id"]}})
            
            # remove all car_boxes
            for box in list(ax1.patches):
                box.set_visible(False)
                box.remove()
            
            for index in range(len(doc["x_position"])):
                car_x_pos = doc["x_position"][index]
                car_y_pos = doc["y_position"][index]
                car_class = 2
                #print("index {} at ({},{})".format(index, car_x_pos, car_y_pos))
                if car_x_pos >= x_end and car_x_pos <= x_start:
                    box = patches.Circle((car_x_pos, car_y_pos), 5, color=colors[car_class])
                    ax1.add_patch(box)
            return ax1,
            # loop through the vehicles and plot
            # for index, car_obj in enumerate(traj_cursor):
            #     car_x_pos = doc["x_position"][index]
            #     car_y_pos = doc["y_position"][index]
            #     car_length = car_obj["length"]
            #     car_width = car_obj["width"]
            #     car_class = car_obj["coarse_vehicle_class"]
            #     if isinstance(car_length, list):
            #         car_length = car_length[0]
            #     if isinstance(car_width, list):
            #         car_width = car_width[0]
            #     if car_x_pos >= x_end and car_x_pos <= x_start:
            #         box = patches.Rectangle((car_x_pos, car_y_pos), 
            #                                 car_length, 
            #                                 car_width, 
            #                                 color=colors[car_class])
            #         ax1.add_patch(box)
                # print("id: {}, ({}, {}), {}x{}".format(index, doc["x_position"][index],
                #                                        doc["y_position"][index],
                #                                        car_obj["length"],
                #                                        car_obj["width"]))
            #return ax1,
        
        self.anim = animation.FuncAnimation(fig, func=animate,
                                            init_func=init,
                                            frames=frames,
                                            repeat=False,
                                            interval=2,
                                            fargs=(frame_text,cursor,cache_vehicle),
                                            blit=False)
        
        if save:
            self.anim.save('animation.mp4', writer='ffmpeg', fps=30)
        plt.show()
        print("complete")
            
    
    def visualize_road_segment(self, 
                               start=1000, end=2000, 
                               offset_frames=0, 
                               save=False,
                               frames=500): 
        """
        Visualizes a road segment by continuously querying the database for 
        trajectories whose x_position lies between start and end at the 
        timestamp_counter

        Parameters
        ----------
        start : INT (represent start road segment in feet)
        end : INT (represent end road segment in feet)
        offset_frames : INT (represent how many frames to skip initially)
        save : BOOLEAN (save visualization as video)
        frames : INT (number of frames to visualize)
        """
        
        # set up matplotlib
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.set_aspect('equal', 'box')
        ax1.set(ylim=[0,100])
        ax1.set_title("Bird-eye view")
        ax1.set(xlim=[max(start, end), min(start, end)])
        frame_text = ax1.text(max(ax1.get_xlim()), max(ax1.get_ylim()), 'Frame 0', fontsize=12)
        
        # queries all documents where the first element of x_position array 
        # ... lies between start and end
        traj_data = self.timestamp_dbr.get_range("x_position.0", start - 50, end + 50)
        
        def init():
            return ax1,
        
        # approach #1: query every frame
        def animate(i, traj_data, frame_text):
            frame_text.set_text('Frame {}'.format(i))
            i = i + offset_frames
            colors = ['r', 'b', 'g', 'm', 'y', 'k']
            # re-query from db 
            traj_data = self.timestamp_dbr.get_range("x_position.{}".format(i), 
                                           start - 50, end + 50)
            
            # remove all car_boxes
            for box in list(ax1.patches):
                box.set_visible(False)
                box.remove()
            
            # update all cars by 1 timestamp
            for car_data in traj_data: 
                # animate car
                # print("querying car!")
                x = car_data["x_position"]
                y = car_data["y_position"]
                width = car_data["width"][0]
                length = car_data["length"][0]
                car_id = car_data["_id"]
                class_id = car_data["coarse_vehicle_class"]
                
                box = patches.Rectangle((x[i], y[i]), length, width, color=colors[class_id])
                ax1.add_patch(box)
                
            return ax1,

        self.anim = animation.FuncAnimation(fig, func=animate,
                                            init_func= init,
                                            frames=frames,
                                            repeat=False,
                                            interval=20,
                                            fargs=(traj_data,frame_text,),
                                            blit=False)
        
        if save:
            self.anim.save('animation.mp4', writer='ffmpeg', fps=30)
        plt.show()
        print("complete")
        
if True and __name__=="__main__":
    
    os.chdir("/isis/home/teohz/Desktop/videowall")
    with open('config.json') as f:
        config = json.load(f)
    
    viz = OverheadVisualizer(config)
    
    viz.visualize()
    
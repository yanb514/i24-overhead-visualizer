#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 15:42:19 2022

@author: teohz
"""
from i24_database_api.db_reader import DBReader
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.animation as animation
import numpy as np
import cmd
import json
import os
import pymongo

class OverheadVisualizer():
    """
    Overhead Visualizer utilizes i24_database_api to query trajectories
    information and plot a visualization of the vehicles.
    """
    
    def __init__(self, config):
        """
        Initializes an Overhead Traffic VIsualizer object
        
        Parameters
        ----------
        config : object
        """
        self.timestamp_dbr = DBReader(host=config["host"], 
                                      port=config["port"], 
                                      username=config["username"], 
                                      password=config["password"], 
                                      database_name=config["timestamp_database"], 
                                      collection_name=config["timestamp_collection"])
        self.traj_dbr = DBReader(host=config["host"],
                                 port=config["port"],
                                 username=config["username"], 
                                 password=config["password"], 
                                 database_name=config["traj_database"], 
                                 collection_name=config["traj_collection"])
        self.anim = None
        self.x_start = 15000
        self.x_end = 14000
        self.framerate = 30
        
    def visualize(self, frames=20000, save=False):
        
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.set_aspect('equal', 'box')
        ax1.set(ylim=[-5, 60])
        ax1.set_title("Bird-eye view")
        ax1.set(xlim=[self.x_start, self.x_end])
        
        def on_xlims_change(event_ax):
            # print("updated xlims: ", event_ax.get_xlim())
            new_xlim = event_ax.get_xlim()
            # ax1.set(xlim=new_xlim)
            self.x_start = new_xlim[0]
            self.x_end = new_xlim[1]
        
        ax1.callbacks.connect('xlim_changed', on_xlims_change)
        
        # maintains a cache of vehicle information (width, height, class)        
        # cache_vehicle[car_id] = [width, height, coarse_vehicle_class]
        cache_vehicle = {}
        
        cursor = self.timestamp_dbr.collection.find().sort([("timestamp", pymongo.ASCENDING)]).limit(frames)
        
        def init():
            return ax1,
        
        def animate(i, cursor, cache_vehicle):
            # animate based on framerate (1 to 30)
            if (i % 30 > self.framerate):
                return ax1,
            
            colors = ['r', 'b', 'g', 'm', 'y', 'k']
            
            #print("frame: {}".format(i))
            ax1.set_title("Frame {}".format(i))
            
            doc = cursor.next()
            # print(doc["timestamp"])
            # print(len(doc["x_position"]))
            
            # remove all car_boxes
            for box in list(ax1.patches):
                box.set_visible(False)
                box.remove()
            
            traj_cursor = self.traj_dbr.collection.find({"_id": {"$in": doc["id"]} }, 
                                                        {"width":1, "length":1, "coarse_vehicle_class": 1})
            
            for index, traj in enumerate(traj_cursor):
                # print("index: {} is {}".format(index, traj))
                # { ObjectId('...') : [length, width, coarse_vehicle_class] }
                cache_vehicle[traj["_id"]] = [traj["length"], traj["width"], traj["coarse_vehicle_class"]]
            
            for index in range(len(doc["x_position"])):
                car_x_pos = doc["x_position"][index]
                car_y_pos = doc["y_position"][index]
                car_width = cache_vehicle[doc["id"][index]][0]
                car_height = cache_vehicle[doc["id"][index]][1]
                car_class = cache_vehicle[doc["id"][index]][2]
                # print("index {} at ({},{})".format(index, car_x_pos, car_y_pos))
                if car_x_pos <= self.x_start and car_x_pos >= self.x_end:
                    box = patches.Rectangle((car_x_pos, car_y_pos),
                                            car_width, car_height, color=colors[car_class])
                    ax1.add_patch(box)
            return ax1,
        
        self.anim = animation.FuncAnimation(fig, func=animate,
                                            init_func=init,
                                            frames=frames,
                                            repeat=False,
                                            interval=2,
                                            fargs=(cursor,cache_vehicle),
                                            blit=False)
        
        if save:
            self.anim.save('animation.mp4', writer='ffmpeg', fps=30)
        plt.show()
        print("complete")
        
if True and __name__=="__main__":
    
    os.chdir("/isis/home/teohz/Desktop/videowall")
    with open('config.json') as f:
        config = json.load(f)
    
    viz = OverheadVisualizer(config)
    
    viz.visualize()
    
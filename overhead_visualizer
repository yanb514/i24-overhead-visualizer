#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 15:42:19 2022

@author: teohz
"""
from i24_database_api.db_reader import DBReader
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.animation as animation
import numpy as np
import cmd
import json
import os

class OverheadVisualizer():
    """
    Overhead Visualizer utilizes i24_database_api to query trajectories
    information and plot a visualization of the vehicles.
    """
    
    def __init__(self, config):
        """
        Initializes an Overhead Traffic VIsualizer object
        
        Parameters
        ----------
        config : object
        """
        self.dbr = DBReader(host=config["host"], 
                       port=config["port"], 
                       username=config["username"], 
                       password=config["password"], 
                       database_name=config["database_name"], 
                       collection_name=config["collection_name"])
        self.anim = None
        
    def get_trajectory_information(self):
        """
        Prints some basic trajectory information of the database collection
        """
        # Number of trajectories
        print("# of trajectories:", self.dbr.count())
        
        # Number of unique coarse_vehicle_class (quite slow)
        # [0, 1, 2, 3, 4, 5]
        # print(self.dbr.collection.distinct("coarse_vehicle_class"))
        
        # Document keys
        print("Keys:")
        cmd.Cmd().columnize(list(self.dbr.get_keys()), displaywidth=80)
        
        # Get max and min road segment
        min_x = self.dbr.get_min("x_position")
        max_x = self.dbr.get_max("x_position")
        min_y = self.dbr.get_min("y_position")
        max_y = self.dbr.get_max("y_position")
        print("x_position range: ", min_x, "to", max_x)
        print("y_position range: ", min_y, "to", max_y)
        
        # Timestamp 
        min_time = self.dbr.get_min("first_timestamp")
        max_time = self.dbr.get_max("last_timestamp")
        print("timestamp range: ", min_time, "to", max_time)
    
    def visualize_road_segment(self, 
                               start=1000, end=2000, 
                               offset_frames=0, 
                               save=False,
                               frames=500): 
        """
        Visualizes a road segment by continuously querying the database for 
        trajectories whose x_position lies between start and end at the 
        timestamp_counter

        Parameters
        ----------
        start : INT (represent start road segment in feet)
        end : INT (represent end road segment in feet)
        offset_frames : INT (represent how many frames to skip initially)
        save : BOOLEAN (save visualization as video)
        frames : INT (number of frames to visualize)
        """
        
        # set up matplotlib
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.set_aspect('equal', 'box')
        ax1.set(ylim=[-200,200])
        ax1.set_title("Bird-eye view")
        ax1.set(xlim=[max(start, end), min(start, end)])
        frame_text = ax1.text(max(ax1.get_xlim()), max(ax1.get_ylim()), 'Frame 0', fontsize=12)
        
        # queries all documents where the first element of x_position array 
        # ... lies between start and end
        traj_data = self.dbr.get_range("x_position.0", start - 50, end + 50)
        
        def init():
            return ax1,
        
        # approach #1: query every frame
        def animate(i, traj_data, frame_text):
            frame_text.set_text('Frame {}'.format(i))
            i = i + offset_frames
            colors = ['r', 'b', 'g', 'm', 'y', 'k']
            # re-query from db 
            traj_data = self.dbr.get_range("x_position.{}".format(i), 
                                           start - 50, end + 50)
            
            # remove all car_boxes
            for box in list(ax1.patches):
                box.set_visible(False)
                box.remove()
            
            # update all cars by 1 timestamp
            for car_data in traj_data: 
                # animate car
                # print("querying car!")
                x = car_data["x_position"]
                y = car_data["y_position"]
                width = car_data["width"][0]
                length = car_data["length"][0]
                car_id = car_data["_id"]
                class_id = car_data["coarse_vehicle_class"]
                
                box = patches.Rectangle((x[i], y[i]), length, width, color=colors[class_id])
                ax1.add_patch(box)
                
            return ax1,

        self.anim = animation.FuncAnimation(fig, func=animate,
                                            init_func= init,
                                            frames=frames,
                                            repeat=False,
                                            interval=20,
                                            fargs=(traj_data,frame_text,),
                                            blit=False)
        
        if save:
            self.anim.save('animation.mp4', writer='ffmpeg', fps=30)
        plt.show()
        print("complete")
        
    def get_aggregated_timestamp(self):
        timestamp = self.dbr.collection.aggregate()
    
if True and __name__=="__main__":
    
    os.chdir("/isis/home/teohz/Desktop/videowall")
    with open('config.json') as f:
        config = json.load(f)
    
    viz = OverheadVisualizer(config)    
    viz.get_trajectory_information()
    
    viz.visualize_road_segment(save=False)
    